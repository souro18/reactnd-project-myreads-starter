{"version":3,"sources":["Register.js"],"names":["DisplayingErrorMessagesSchema","Yup","shape","name","min","max","required","email","password","changepassword","when","is","val","length","then","oneOf","Register","props","useState","isSuccess","setSuccess","error","setError","className","msg","initialValues","validationSchema","onSubmit","values","data","register","catch","e","response","errors","touched","handleBlur","handleChange","htmlFor","id","placeholder","type","onBlur","onChange","value","to"],"mappings":"2KAOMA,EAAgCC,MAAaC,MAAM,CACrDC,KAAMF,MACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,MAAON,MACJM,MAAM,iBACND,SAAS,YACZE,SAAUP,MAAaK,SAAS,0BAChCG,eAAgBR,MAAaS,KAAK,WAAY,CAC1CC,GAAI,SAAAC,GAAG,SAAKA,GAAOA,EAAIC,OAAS,IAChCC,KAAMb,MAAac,MACjB,CAACd,IAAQ,aACT,yCAmFKe,UA/EE,SAAAC,GAAU,IAAD,EACWC,oBAAS,GADpB,mBACdC,EADc,KACHC,EADG,OAEMF,mBAAS,IAFf,mBAEdG,EAFc,KAEPC,EAFO,KAatB,OACI,yBAAKC,UAAU,QACf,6BAASA,UAAU,UACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACVF,GAAS,yBAAKE,UAAU,eAAeF,EAAMG,KAC7CL,GAAa,yBAAKI,UAAU,iBAAf,gDACd,yBAAKA,UAAU,eACX,wBAAIA,UAAU,cAAd,WACA,kBAAC,IAAD,CACIE,cAAe,CACXtB,KAAM,GACNI,MAAO,GACPC,SAAU,GACVC,eAAgB,IAEpBiB,iBAAkB1B,EAClB2B,SAAU,SAAAC,GA1Bf,IAAAC,IA2BoBD,EA1BlCE,YAASD,GACLf,MAAM,SAAAe,GAAI,OAAIT,GAAW,MACzBW,OAAM,SAAAC,GACAA,EAAEC,UACDX,EAASU,EAAEC,SAASJ,YAyBX,gBAAGK,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,aAAhC,OACL,kBAAC,IAAD,KACI,yBAAKd,UAAU,cACX,2BAAOe,QAAQ,QAAO,uBAAGf,UAAU,2CACnC,kBAAC,IAAD,CAAOgB,GAAG,OAAOpC,KAAK,OAAOqC,YAAY,cACxCL,EAAQhC,MAAQ+B,EAAO/B,MAAQ,yBAAKoB,UAAU,SAASW,EAAO/B,OAEnE,yBAAKoB,UAAU,cACX,2BAAOe,QAAQ,SAAQ,uBAAGf,UAAU,qBACpC,kBAAC,IAAD,CACIgB,GAAG,QACHpC,KAAK,QACLqC,YAAY,aACZC,KAAK,UAERN,EAAQ5B,OAAS2B,EAAO3B,OAAS,yBAAKgB,UAAU,SAASW,EAAO3B,QAErE,yBAAKgB,UAAU,cACX,2BAAOe,QAAQ,QAAO,uBAAGf,UAAU,oBACnC,kBAAC,IAAD,CAAOgB,GAAG,WAAWpC,KAAK,WAAWsC,KAAK,WAAWD,YAAY,aAChEL,EAAQ3B,UAAY0B,EAAO1B,UAAY,yBAAKe,UAAU,SAASW,EAAO1B,WAE3E,yBAAKe,UAAU,cACX,2BAAOe,QAAQ,kBAAiB,uBAAGf,UAAU,4BAC7C,kBAAC,IAAD,CAAOkB,KAAK,WAAWtC,KAAK,iBAAiBqC,YAAY,mBAAmBE,OAAQN,EAAYO,SAAUN,IACzGF,EAAQ1B,gBAAkByB,EAAOzB,gBAAkB,yBAAKc,UAAU,SAASW,EAAOzB,iBAEvF,yBAAKc,UAAU,0BACX,kBAAC,IAAD,CAAOkB,KAAK,SAAStC,KAAK,SAASoC,GAAG,SAAShB,UAAU,cAAcqB,MAAM,kBAKrF,yBAAKrB,UAAU,qBACX,oDACA,kBAAC,IAAD,CAAMsB,GAAG,UAAT","file":"static/js/5.6bc9678c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { register } from './BooksAPI';\r\n\r\nconst DisplayingErrorMessagesSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(2, 'Too Short!')\r\n      .max(50, 'Too Long!')\r\n      .required('Required'),\r\n    email: Yup.string()\r\n      .email('Invalid email')\r\n      .required('Required'),\r\n    password: Yup.string().required(\"This field is required\"),\r\n    changepassword: Yup.string().when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: Yup.string().oneOf(\r\n          [Yup.ref(\"password\")],\r\n          \"Both password need to be the same\"\r\n        )\r\n    })\r\n  });\r\nconst Register = props => {\r\n    const [ isSuccess, setSuccess] = useState(false);\r\n    const [ error, setError ] = useState({});\r\n\r\n    const onRegister = data => {\r\n         register(data)\r\n            .then( data => setSuccess(true))\r\n            .catch(e => {\r\n                if(e.response) {\r\n                    setError(e.response.data)\r\n                }\r\n            })\r\n    };\r\n    return (\r\n        <div className=\"main\">\r\n        <section className=\"signup\">\r\n            <div className=\"container\">\r\n                <div className=\"signup-content\">\r\n                    {error && <div className=\"error-block\">{error.msg}</div>}\r\n                    {isSuccess && <div className=\"success-block\">Registration successful. You can now log in.</div>}\r\n                    <div className=\"signup-form\">\r\n                        <h2 className=\"form-title\">Sign up</h2>\r\n                        <Formik\r\n                            initialValues={{\r\n                                name: '',\r\n                                email: '',\r\n                                password: '',\r\n                                changepassword: '',\r\n                            }}\r\n                            validationSchema={DisplayingErrorMessagesSchema}\r\n                            onSubmit={values => {\r\n                                onRegister(values);\r\n                            }}\r\n                        >\r\n                            {({ errors, touched, handleBlur, handleChange }) => (\r\n                        <Form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"name\"><i className=\"zmdi zmdi-account material-icons-name\"></i></label>\r\n                                <Field id=\"name\" name=\"name\" placeholder=\"Your Name\" />\r\n                                {touched.name && errors.name && <div className=\"error\">{errors.name}</div>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"email\"><i className=\"zmdi zmdi-email\"></i></label>\r\n                                <Field\r\n                                    id=\"email\"\r\n                                    name=\"email\"\r\n                                    placeholder=\"Your Email\"\r\n                                    type=\"email\"\r\n                                />\r\n                                {touched.email && errors.email && <div className=\"error\">{errors.email}</div>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"pass\"><i className=\"zmdi zmdi-lock\"></i></label>\r\n                                <Field id=\"password\" name=\"password\" type=\"password\" placeholder=\"password\" />\r\n                                {touched.password && errors.password && <div className=\"error\">{errors.password}</div>}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"changepassword\"><i className=\"zmdi zmdi-lock-outline\"></i></label>\r\n                                <Field type=\"password\" name=\"changepassword\" placeholder=\"Confirm password\" onBlur={handleBlur} onChange={handleChange}/>\r\n                                {touched.changepassword && errors.changepassword && <div className=\"error\">{errors.changepassword}</div>}\r\n                            </div>\r\n                            <div className=\"form-group form-button\">\r\n                                <Field type=\"submit\" name=\"signup\" id=\"signup\" className=\"form-submit\" value=\"Register\"/>\r\n                            </div>\r\n                        </Form>\r\n                            )}\r\n                        </Formik>\r\n                        <div className=\"signup-image-link\">\r\n                            <span>Already a member? </span>\r\n                            <Link to=\"/login\">log in</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;"],"sourceRoot":""}